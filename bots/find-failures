#!/usr/bin/python3
# -*- coding: utf-8 -*-

# This file is part of Cockpit.
#
# Copyright (C) 2018 Red Hat, Inc.
#
# Cockpit is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2.1 of the License, or
# (at your option) any later version.
#
# Cockpit is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Cockpit; If not, see <http://www.gnu.org/licenses/>.

import argparse
import sys
import time
import os
import urllib.request
import urllib.error
import socket
import json

sys.dont_write_bytecode = True

def slurp_failure_logs():
    host = os.environ.get("COCKPIT_LEARN_SERVICE_HOST")
    if not host:
        raise RuntimeError("no learn host environment variable: $COCKPIT_LEARN_SERVICE_HOST")
    port = os.environ.get("COCKPIT_LEARN_SERVICE_PORT", "8080")
    url = "http://{0}:{1}/active/".format(host, port)

    logs = { }

    def try_one(url, n, logs):
        items_url = url + str(n) + "/items.jsonl"
        try:
            req = urllib.request.Request(items_url)
            with urllib.request.urlopen(req) as f:
                for line in f.readlines():
                    try:
                        record = json.loads(line.decode('utf-8'))
                        urls = logs.get(record["test"], [ ])
                        urls.append(record["url"])
                    except ValueError as ex:
                        sys.stderr.write("{0}: {1}\n".format(url, ex))
        except (ConnectionResetError, urllib.error.URLError, socket.gaierror) as ex:
            print(ex.code)
            sys.stderr.write("{0}: {1}\n".format(items_url, ex))
            return False
        return True

    n = 0
    while try_one(url, n, logs):
        n = n + 1

    return logs

failure_logs = slurp_failure_logs()
print(failure_logs)

print(failure_logs[sys.argv[1]])
